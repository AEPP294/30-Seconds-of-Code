body {
  // Layout column C (center) width
  --lt-c-cw: #{$main-column-width};
  // Layout bleed width (either side)
  --lt-bl-w: var(--s-6);

  display: grid;
  grid-template-columns:
    minmax(0, 1fr)
    minmax(auto, var(--lt-c-cw))
    minmax(0, 1fr);
  grid-template-rows: auto auto auto auto;
  // Note: Adding new areas (top, bottom rows) will create additional gaps
  // even if they are empty. Using `:empty` and `display: none` might be
  // worth trying, but it's not necessarily the best idea (accessibility).
  // One of these areas (right) might be used for a ToC sidebar.
  // It's also possible that some cross links will be added to the bottom
  // or side of the page, but then again, these could go inside the main area.
  grid-template-areas:
    'header header header'
    // 'left top right' -> Add this if it's ever needed
    'left center right'
    // 'left bottom right' -> Add this if it's ever needed
    'footer footer footer';
  // Add spacing between header, main area and footer.
  row-gap: var(--s-12);
}

// TODO: More components need to use gaps

// TODO: Use the width + scroll + space media query to work around the border
// radiuses. Basically define a radius at the very top and then zero it out
// inside `article`-related components below the threshold. This ensures that
// the content bleeds to the edge of the screen properly.
// TODO: This same query could be used to create a generic spacing thing across
// components and then inherit it via variables. Less easy to work with, but
// could be worth doing.

main {
  // Use the correct grid area (spans 1 column).
  grid-area: center;

  // Explicitly set which elements will be grid containers.
  > article {
    display: grid;
    grid-template-columns: var(--lt-bl-w) 1fr var(--lt-bl-w);

    > * {
      // Place the content in the middle column (no bleed)
      grid-column: 2;
    }
  }
}

// This only applies for the snippet page, as it's the only place where
// `article` is a direct child of `main`.
main > article {
  --row-gap: var(--s-6);
  row-gap: var(--row-gap);
}
